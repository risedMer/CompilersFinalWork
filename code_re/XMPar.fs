// Implementation file for parser generated by fsyacc
module XMPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "XMPar.fsy"


open XMAbsyn

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10 //  \n 的 ASCII 码

# 14 "XMPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | FLOAT
  | SLEEP
  | CSTFLOAT of (float32)
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_FLOAT
    | TOKEN_SLEEP
    | TOKEN_CSTFLOAT
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_ConstF
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | NOT  -> 11 
  | SEQOR  -> 12 
  | SEQAND  -> 13 
  | EQ  -> 14 
  | NE  -> 15 
  | GT  -> 16 
  | LT  -> 17 
  | GE  -> 18 
  | LE  -> 19 
  | PLUS  -> 20 
  | MINUS  -> 21 
  | TIMES  -> 22 
  | DIV  -> 23 
  | MOD  -> 24 
  | CHAR  -> 25 
  | ELSE  -> 26 
  | IF  -> 27 
  | INT  -> 28 
  | NULL  -> 29 
  | PRINT  -> 30 
  | PRINTLN  -> 31 
  | RETURN  -> 32 
  | VOID  -> 33 
  | WHILE  -> 34 
  | FLOAT  -> 35 
  | SLEEP  -> 36 
  | CSTFLOAT _ -> 37 
  | CSTSTRING _ -> 38 
  | NAME _ -> 39 
  | CSTINT _ -> 40 
  | CSTBOOL _ -> 41 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_NOT 
  | 12 -> TOKEN_SEQOR 
  | 13 -> TOKEN_SEQAND 
  | 14 -> TOKEN_EQ 
  | 15 -> TOKEN_NE 
  | 16 -> TOKEN_GT 
  | 17 -> TOKEN_LT 
  | 18 -> TOKEN_GE 
  | 19 -> TOKEN_LE 
  | 20 -> TOKEN_PLUS 
  | 21 -> TOKEN_MINUS 
  | 22 -> TOKEN_TIMES 
  | 23 -> TOKEN_DIV 
  | 24 -> TOKEN_MOD 
  | 25 -> TOKEN_CHAR 
  | 26 -> TOKEN_ELSE 
  | 27 -> TOKEN_IF 
  | 28 -> TOKEN_INT 
  | 29 -> TOKEN_NULL 
  | 30 -> TOKEN_PRINT 
  | 31 -> TOKEN_PRINTLN 
  | 32 -> TOKEN_RETURN 
  | 33 -> TOKEN_VOID 
  | 34 -> TOKEN_WHILE 
  | 35 -> TOKEN_FLOAT 
  | 36 -> TOKEN_SLEEP 
  | 37 -> TOKEN_CSTFLOAT 
  | 38 -> TOKEN_CSTSTRING 
  | 39 -> TOKEN_NAME 
  | 40 -> TOKEN_CSTINT 
  | 41 -> TOKEN_CSTBOOL 
  | 44 -> TOKEN_end_of_input
  | 42 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtU 
    | 31 -> NONTERM_StmtU 
    | 32 -> NONTERM_StmtU 
    | 33 -> NONTERM_Expr 
    | 34 -> NONTERM_Expr 
    | 35 -> NONTERM_ExprNotAccess 
    | 36 -> NONTERM_ExprNotAccess 
    | 37 -> NONTERM_ExprNotAccess 
    | 38 -> NONTERM_ExprNotAccess 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_AtExprNotAccess 
    | 56 -> NONTERM_AtExprNotAccess 
    | 57 -> NONTERM_AtExprNotAccess 
    | 58 -> NONTERM_AtExprNotAccess 
    | 59 -> NONTERM_Access 
    | 60 -> NONTERM_Access 
    | 61 -> NONTERM_Access 
    | 62 -> NONTERM_Access 
    | 63 -> NONTERM_Access 
    | 64 -> NONTERM_Exprs 
    | 65 -> NONTERM_Exprs 
    | 66 -> NONTERM_Exprs1 
    | 67 -> NONTERM_Exprs1 
    | 68 -> NONTERM_Const 
    | 69 -> NONTERM_Const 
    | 70 -> NONTERM_Const 
    | 71 -> NONTERM_Const 
    | 72 -> NONTERM_ConstF 
    | 73 -> NONTERM_ConstF 
    | 74 -> NONTERM_Type 
    | 75 -> NONTERM_Type 
    | 76 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 44 
let _fsyacc_tagOfErrorTerminal = 42

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | FLOAT  -> "FLOAT" 
  | SLEEP  -> "SLEEP" 
  | CSTFLOAT _ -> "CSTFLOAT" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FLOAT  -> (null : System.Object) 
  | SLEEP  -> (null : System.Object) 
  | CSTFLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 8us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 64us; 54us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 4us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 67us; 6us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 64us; 65us; 6us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 66us; 64us; 68us; 30us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 48us; 74us; 75us; 77us; 102us; 80us; 81us; 82us; 83us; 85us; 86us; 103us; 87us; 104us; 88us; 105us; 89us; 106us; 90us; 107us; 91us; 108us; 92us; 109us; 93us; 110us; 94us; 111us; 95us; 112us; 96us; 113us; 97us; 114us; 98us; 115us; 100us; 118us; 99us; 129us; 101us; 132us; 102us; 30us; 65535us; 37us; 71us; 40us; 71us; 43us; 71us; 50us; 71us; 56us; 71us; 58us; 71us; 59us; 71us; 62us; 71us; 64us; 71us; 74us; 71us; 77us; 71us; 80us; 71us; 82us; 71us; 85us; 71us; 103us; 71us; 104us; 71us; 105us; 71us; 106us; 71us; 107us; 71us; 108us; 71us; 109us; 71us; 110us; 71us; 111us; 71us; 112us; 71us; 113us; 71us; 114us; 71us; 115us; 71us; 118us; 72us; 129us; 71us; 132us; 71us; 31us; 65535us; 37us; 73us; 40us; 73us; 43us; 73us; 50us; 73us; 56us; 73us; 58us; 73us; 59us; 73us; 62us; 73us; 64us; 73us; 74us; 73us; 77us; 73us; 80us; 73us; 82us; 73us; 85us; 73us; 103us; 73us; 104us; 73us; 105us; 73us; 106us; 73us; 107us; 73us; 108us; 73us; 109us; 73us; 110us; 73us; 111us; 73us; 112us; 73us; 113us; 73us; 114us; 73us; 115us; 73us; 118us; 73us; 126us; 128us; 129us; 73us; 132us; 73us; 33us; 65535us; 37us; 70us; 40us; 70us; 43us; 70us; 50us; 70us; 56us; 70us; 58us; 70us; 59us; 70us; 62us; 70us; 64us; 70us; 74us; 70us; 77us; 70us; 80us; 70us; 82us; 70us; 85us; 70us; 103us; 70us; 104us; 70us; 105us; 70us; 106us; 70us; 107us; 70us; 108us; 70us; 109us; 70us; 110us; 70us; 111us; 70us; 112us; 70us; 113us; 70us; 114us; 70us; 115us; 70us; 118us; 69us; 120us; 121us; 123us; 124us; 126us; 127us; 129us; 70us; 132us; 70us; 1us; 65535us; 77us; 78us; 2us; 65535us; 77us; 131us; 132us; 133us; 31us; 65535us; 37us; 116us; 40us; 116us; 43us; 116us; 50us; 116us; 56us; 116us; 58us; 116us; 59us; 116us; 62us; 116us; 64us; 116us; 74us; 116us; 77us; 116us; 80us; 116us; 82us; 116us; 85us; 116us; 103us; 116us; 104us; 116us; 105us; 116us; 106us; 116us; 107us; 116us; 108us; 116us; 109us; 116us; 110us; 116us; 111us; 116us; 112us; 116us; 113us; 116us; 114us; 116us; 115us; 116us; 118us; 116us; 126us; 116us; 129us; 116us; 132us; 116us; 31us; 65535us; 37us; 117us; 40us; 117us; 43us; 117us; 50us; 117us; 56us; 117us; 58us; 117us; 59us; 117us; 62us; 117us; 64us; 117us; 74us; 117us; 77us; 117us; 80us; 117us; 82us; 117us; 85us; 117us; 103us; 117us; 104us; 117us; 105us; 117us; 106us; 117us; 107us; 117us; 108us; 117us; 109us; 117us; 110us; 117us; 111us; 117us; 112us; 117us; 113us; 117us; 114us; 117us; 115us; 117us; 118us; 117us; 126us; 117us; 129us; 117us; 132us; 117us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 42us; 46us; 51us; 58us; 65us; 96us; 127us; 159us; 193us; 195us; 198us; 230us; 262us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 30us; 1us; 23us; 14us; 24us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 14us; 26us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 26us; 1us; 27us; 3us; 28us; 30us; 31us; 3us; 28us; 30us; 31us; 16us; 28us; 30us; 31us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 3us; 28us; 30us; 31us; 2us; 28us; 30us; 1us; 28us; 2us; 29us; 32us; 2us; 29us; 32us; 15us; 29us; 32us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 2us; 29us; 32us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 4us; 33us; 36us; 60us; 63us; 3us; 33us; 36us; 63us; 1us; 34us; 2us; 34us; 57us; 1us; 35us; 1us; 36us; 14us; 36us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 2us; 37us; 59us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 14us; 38us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 39us; 14us; 39us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 40us; 1us; 41us; 14us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 63us; 15us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 66us; 67us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 2us; 57us; 60us; 1us; 57us; 1us; 58us; 2us; 58us; 63us; 1us; 59us; 1us; 60us; 2us; 60us; 63us; 1us; 60us; 2us; 61us; 62us; 2us; 61us; 63us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 65us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 69us; 2us; 70us; 73us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 123us; 125us; 128us; 130us; 145us; 147us; 149us; 153us; 157us; 174us; 178us; 181us; 183us; 186us; 189us; 205us; 208us; 210us; 212us; 214us; 216us; 221us; 225us; 227us; 230us; 232us; 234us; 249us; 252us; 254us; 256us; 258us; 260us; 275us; 277us; 292us; 294us; 296us; 311us; 326us; 341us; 356us; 371us; 386us; 401us; 416us; 431us; 446us; 461us; 476us; 491us; 505us; 520us; 535us; 551us; 553us; 555us; 557us; 559us; 561us; 563us; 565us; 567us; 569us; 571us; 573us; 575us; 577us; 579us; 581us; 584us; 586us; 588us; 591us; 593us; 595us; 598us; 600us; 603us; 606us; 608us; 610us; 612us; 614us; 616us; 618us; 620us; 622us; 625us; 627us; 629us; 631us; 633us; 635us; 637us; |]
let _fsyacc_action_rows = 144
let _fsyacc_actionTableElements = [|4us; 16386us; 25us; 142us; 28us; 141us; 33us; 23us; 35us; 143us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 4us; 16386us; 25us; 142us; 28us; 141us; 33us; 23us; 35us; 143us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 1us; 16us; 22us; 14us; 39us; 12us; 3us; 32768us; 1us; 16us; 22us; 14us; 39us; 13us; 1us; 16390us; 5us; 19us; 0us; 16391us; 1us; 16391us; 1us; 29us; 3us; 32768us; 1us; 16us; 22us; 14us; 39us; 12us; 1us; 16392us; 5us; 19us; 3us; 32768us; 1us; 16us; 22us; 14us; 39us; 12us; 2us; 32768us; 2us; 18us; 5us; 19us; 0us; 16393us; 2us; 32768us; 6us; 20us; 40us; 21us; 0us; 16394us; 1us; 32768us; 6us; 22us; 0us; 16395us; 1us; 32768us; 39us; 24us; 1us; 32768us; 1us; 25us; 3us; 16398us; 25us; 142us; 28us; 141us; 35us; 143us; 1us; 32768us; 2us; 27us; 1us; 32768us; 3us; 37us; 0us; 16396us; 3us; 16398us; 25us; 142us; 28us; 141us; 35us; 143us; 1us; 32768us; 2us; 31us; 1us; 32768us; 3us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 8us; 35us; 3us; 32768us; 25us; 142us; 28us; 141us; 35us; 143us; 0us; 16401us; 20us; 16403us; 1us; 118us; 3us; 37us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 25us; 142us; 27us; 55us; 28us; 141us; 29us; 138us; 30us; 82us; 31us; 84us; 32us; 50us; 34us; 61us; 35us; 143us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 1us; 32768us; 4us; 39us; 0us; 16402us; 20us; 16403us; 1us; 118us; 3us; 37us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 25us; 142us; 27us; 55us; 28us; 141us; 29us; 138us; 30us; 82us; 31us; 84us; 32us; 50us; 34us; 61us; 35us; 143us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16404us; 1us; 32768us; 7us; 43us; 20us; 16403us; 1us; 118us; 3us; 37us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 25us; 142us; 27us; 55us; 28us; 141us; 29us; 138us; 30us; 82us; 31us; 84us; 32us; 50us; 34us; 61us; 35us; 143us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 26us; 59us; 0us; 16407us; 14us; 32768us; 7us; 49us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 0us; 16408us; 14us; 32768us; 1us; 118us; 7us; 51us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16409us; 14us; 32768us; 7us; 53us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 1us; 56us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 14us; 32768us; 2us; 58us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 17us; 32768us; 1us; 118us; 3us; 37us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 27us; 55us; 29us; 138us; 30us; 82us; 31us; 84us; 32us; 50us; 34us; 61us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 17us; 32768us; 1us; 118us; 3us; 37us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 27us; 55us; 29us; 138us; 30us; 82us; 31us; 84us; 32us; 50us; 34us; 61us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16412us; 1us; 32768us; 1us; 62us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 14us; 32768us; 2us; 64us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 17us; 32768us; 1us; 118us; 3us; 37us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 27us; 55us; 29us; 138us; 30us; 82us; 31us; 84us; 32us; 50us; 34us; 61us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 3us; 16417us; 2us; 125us; 5us; 129us; 9us; 74us; 2us; 16417us; 5us; 129us; 9us; 74us; 0us; 16418us; 1us; 16418us; 2us; 119us; 0us; 16419us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 16420us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 1us; 16443us; 1us; 77us; 13us; 16448us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 1us; 32768us; 2us; 79us; 0us; 16421us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16422us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 16423us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 0us; 16424us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 16425us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 3us; 16426us; 22us; 105us; 23us; 106us; 24us; 107us; 3us; 16427us; 22us; 105us; 23us; 106us; 24us; 107us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 9us; 16431us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 9us; 16432us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 9us; 16433us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 9us; 16434us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 9us; 16435us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 9us; 16436us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 11us; 16437us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 13us; 32768us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 12us; 16438us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 14us; 32768us; 6us; 130us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 14us; 16450us; 8us; 132us; 12us; 115us; 13us; 114us; 14us; 108us; 15us; 109us; 16us; 110us; 17us; 111us; 18us; 112us; 19us; 113us; 20us; 103us; 21us; 104us; 22us; 105us; 23us; 106us; 24us; 107us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16439us; 0us; 16440us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16441us; 3us; 32768us; 1us; 123us; 22us; 126us; 39us; 122us; 1us; 16442us; 5us; 129us; 0us; 16443us; 3us; 32768us; 1us; 123us; 22us; 126us; 39us; 122us; 2us; 32768us; 2us; 125us; 5us; 129us; 0us; 16444us; 9us; 32768us; 1us; 118us; 10us; 120us; 21us; 136us; 22us; 126us; 29us; 138us; 37us; 139us; 39us; 122us; 40us; 134us; 41us; 135us; 1us; 16445us; 5us; 129us; 0us; 16446us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16447us; 0us; 16449us; 13us; 32768us; 1us; 118us; 10us; 120us; 11us; 80us; 21us; 136us; 22us; 126us; 29us; 138us; 30us; 82us; 31us; 84us; 36us; 85us; 37us; 139us; 39us; 76us; 40us; 134us; 41us; 135us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 2us; 32768us; 37us; 140us; 40us; 137us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 0us; 16459us; 0us; 16460us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 8us; 9us; 14us; 15us; 17us; 18us; 19us; 23us; 27us; 29us; 30us; 32us; 36us; 38us; 42us; 45us; 46us; 49us; 50us; 52us; 53us; 55us; 57us; 61us; 63us; 65us; 66us; 70us; 72us; 74us; 75us; 76us; 78us; 82us; 83us; 104us; 106us; 107us; 128us; 129us; 131us; 152us; 153us; 154us; 156us; 157us; 172us; 173us; 188us; 189us; 204us; 205us; 206us; 208us; 222us; 237us; 255us; 273us; 274us; 276us; 290us; 305us; 323us; 324us; 325us; 326us; 327us; 331us; 334us; 335us; 337us; 338us; 352us; 366us; 368us; 382us; 384us; 385us; 399us; 400us; 414us; 428us; 429us; 443us; 457us; 461us; 465us; 466us; 467us; 468us; 478us; 488us; 498us; 508us; 518us; 528us; 540us; 554us; 567us; 582us; 597us; 611us; 625us; 639us; 653us; 667us; 681us; 695us; 709us; 723us; 737us; 751us; 765us; 779us; 780us; 781us; 795us; 796us; 800us; 802us; 803us; 807us; 810us; 811us; 821us; 823us; 824us; 838us; 839us; 840us; 854us; 855us; 856us; 857us; 860us; 861us; 862us; 863us; 864us; 865us; 866us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 7us; 5us; 5us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 16414us; 16415us; 16416us; 65535us; 65535us; 16418us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16439us; 16440us; 65535us; 16441us; 65535us; 65535us; 16443us; 65535us; 65535us; 16444us; 65535us; 65535us; 16446us; 65535us; 16447us; 16449us; 65535us; 16451us; 16452us; 16453us; 65535us; 16454us; 16455us; 16456us; 16457us; 16458us; 16459us; 16460us; |]
let _fsyacc_reductions ()  =    [| 
# 413 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> XMAbsyn.program in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 422 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "XMPar.fsy"
                                                               Prog _1 
                   )
# 38 "XMPar.fsy"
                 : XMAbsyn.program));
# 433 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "XMPar.fsy"
                                                               [] 
                   )
# 43 "XMPar.fsy"
                 : 'gentype_Topdecs));
# 443 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Topdec in
            let _2 = parseState.GetInput(2) :?> 'gentype_Topdecs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "XMPar.fsy"
                                                               _1 :: _2 
                   )
# 44 "XMPar.fsy"
                 : 'gentype_Topdecs));
# 455 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "XMPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 48 "XMPar.fsy"
                 : 'gentype_Topdec));
# 466 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Fundec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "XMPar.fsy"
                                                               _1 
                   )
# 49 "XMPar.fsy"
                 : 'gentype_Topdec));
# 477 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "XMPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 53 "XMPar.fsy"
                 : 'gentype_Vardec));
# 489 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "XMPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 57 "XMPar.fsy"
                 : 'gentype_Vardesc));
# 500 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "XMPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 58 "XMPar.fsy"
                 : 'gentype_Vardesc));
# 511 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "XMPar.fsy"
                                                               _2                                      
                   )
# 59 "XMPar.fsy"
                 : 'gentype_Vardesc));
# 522 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "XMPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 60 "XMPar.fsy"
                 : 'gentype_Vardesc));
# 533 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardesc in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "XMPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 61 "XMPar.fsy"
                 : 'gentype_Vardesc));
# 545 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "XMPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 65 "XMPar.fsy"
                 : 'gentype_Fundec));
# 558 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Type in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Paramdecs in
            let _6 = parseState.GetInput(6) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "XMPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 66 "XMPar.fsy"
                 : 'gentype_Fundec));
# 572 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "XMPar.fsy"
                                                               [] 
                   )
# 71 "XMPar.fsy"
                 : 'gentype_Paramdecs));
# 582 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "XMPar.fsy"
                                                               _1 
                   )
# 72 "XMPar.fsy"
                 : 'gentype_Paramdecs));
# 593 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "XMPar.fsy"
                                                               [_1]     
                   )
# 76 "XMPar.fsy"
                 : 'gentype_Paramdecs1));
# 604 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_Paramdecs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "XMPar.fsy"
                                                               _1 :: _3 
                   )
# 77 "XMPar.fsy"
                 : 'gentype_Paramdecs1));
# 616 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "XMPar.fsy"
                                                               Block _2 
                   )
# 81 "XMPar.fsy"
                 : 'gentype_Block));
# 627 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "XMPar.fsy"
                                                               [] 
                   )
# 85 "XMPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 637 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Stmt in
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "XMPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 86 "XMPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 649 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Vardec in
            let _3 = parseState.GetInput(3) :?> 'gentype_StmtOrDecSeq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "XMPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 87 "XMPar.fsy"
                 : 'gentype_StmtOrDecSeq));
# 661 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "XMPar.fsy"
                                                               _1 
                   )
# 91 "XMPar.fsy"
                 : 'gentype_Stmt));
# 672 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "XMPar.fsy"
                                                               _1 
                   )
# 92 "XMPar.fsy"
                 : 'gentype_Stmt));
# 683 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "XMPar.fsy"
                                                               Expr(_1)             
                   )
# 96 "XMPar.fsy"
                 : 'gentype_StmtM));
# 694 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "XMPar.fsy"
                                                               Return None          
                   )
# 97 "XMPar.fsy"
                 : 'gentype_StmtM));
# 704 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "XMPar.fsy"
                                                               Return(Some(_2))     
                   )
# 98 "XMPar.fsy"
                 : 'gentype_StmtM));
# 715 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "XMPar.fsy"
                                                               _1                   
                   )
# 99 "XMPar.fsy"
                 : 'gentype_StmtM));
# 726 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "XMPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 100 "XMPar.fsy"
                 : 'gentype_StmtM));
# 739 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "XMPar.fsy"
                                                               While(_3, _5)        
                   )
# 101 "XMPar.fsy"
                 : 'gentype_StmtM));
# 751 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtM in
            let _7 = parseState.GetInput(7) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "XMPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 106 "XMPar.fsy"
                 : 'gentype_StmtU));
# 764 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "XMPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 107 "XMPar.fsy"
                 : 'gentype_StmtU));
# 776 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_StmtU in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "XMPar.fsy"
                                                               While(_3, _5)        
                   )
# 108 "XMPar.fsy"
                 : 'gentype_StmtU));
# 788 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "XMPar.fsy"
                                                               Access _1           
                   )
# 113 "XMPar.fsy"
                 : 'gentype_Expr));
# 799 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "XMPar.fsy"
                                                               _1                  
                   )
# 114 "XMPar.fsy"
                 : 'gentype_Expr));
# 810 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "XMPar.fsy"
                                                               _1                  
                   )
# 118 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 821 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "XMPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 119 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 833 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "XMPar.fsy"
                                                               Call(_1, _3)        
                   )
# 120 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 845 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "XMPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 121 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 856 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "XMPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 122 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 867 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "XMPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 123 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 877 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "XMPar.fsy"
                                                               Prim1("sleep", _2)  
                   )
# 124 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 888 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "XMPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 125 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 900 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "XMPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 126 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 912 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "XMPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 127 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 924 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "XMPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 128 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 936 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "XMPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 129 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 948 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "XMPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 130 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 960 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "XMPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 131 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 972 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "XMPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 132 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 984 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "XMPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 133 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 996 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "XMPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 134 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1008 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "XMPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 135 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1020 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "XMPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 136 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1032 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "XMPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 137 "XMPar.fsy"
                 : 'gentype_ExprNotAccess));
# 1044 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Const in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "XMPar.fsy"
                                                               CstI _1             
                   )
# 142 "XMPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1055 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ConstF in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "XMPar.fsy"
                                                               CstF _1             
                   )
# 143 "XMPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1066 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "XMPar.fsy"
                                                               _2                  
                   )
# 144 "XMPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1077 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "XMPar.fsy"
                                                               Addr _2             
                   )
# 145 "XMPar.fsy"
                 : 'gentype_AtExprNotAccess));
# 1088 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "XMPar.fsy"
                                                               AccVar _1           
                   )
# 149 "XMPar.fsy"
                 : 'gentype_Access));
# 1099 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "XMPar.fsy"
                                                               _2                  
                   )
# 150 "XMPar.fsy"
                 : 'gentype_Access));
# 1110 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Access in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "XMPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 151 "XMPar.fsy"
                 : 'gentype_Access));
# 1121 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_AtExprNotAccess in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "XMPar.fsy"
                                                               AccDeref _2         
                   )
# 152 "XMPar.fsy"
                 : 'gentype_Access));
# 1132 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Access in
            let _3 = parseState.GetInput(3) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "XMPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 153 "XMPar.fsy"
                 : 'gentype_Access));
# 1144 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "XMPar.fsy"
                                                               []       
                   )
# 157 "XMPar.fsy"
                 : 'gentype_Exprs));
# 1154 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "XMPar.fsy"
                                                               _1       
                   )
# 158 "XMPar.fsy"
                 : 'gentype_Exprs));
# 1165 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "XMPar.fsy"
                                                               [_1]     
                   )
# 162 "XMPar.fsy"
                 : 'gentype_Exprs1));
# 1176 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_Exprs1 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "XMPar.fsy"
                                                               _1 :: _3 
                   )
# 163 "XMPar.fsy"
                 : 'gentype_Exprs1));
# 1188 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "XMPar.fsy"
                                                               _1       
                   )
# 167 "XMPar.fsy"
                 : 'gentype_Const));
# 1199 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "XMPar.fsy"
                                                               _1       
                   )
# 168 "XMPar.fsy"
                 : 'gentype_Const));
# 1210 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "XMPar.fsy"
                                                               - _2     
                   )
# 169 "XMPar.fsy"
                 : 'gentype_Const));
# 1221 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "XMPar.fsy"
                                                               -1       
                   )
# 170 "XMPar.fsy"
                 : 'gentype_Const));
# 1231 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float32 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "XMPar.fsy"
                                                               _1       
                   )
# 174 "XMPar.fsy"
                 : 'gentype_ConstF));
# 1242 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> float32 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "XMPar.fsy"
                                                               - _2     
                   )
# 175 "XMPar.fsy"
                 : 'gentype_ConstF));
# 1253 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "XMPar.fsy"
                                                               TypI     
                   )
# 179 "XMPar.fsy"
                 : 'gentype_Type));
# 1263 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "XMPar.fsy"
                                                               TypC     
                   )
# 180 "XMPar.fsy"
                 : 'gentype_Type));
# 1273 "XMPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "XMPar.fsy"
                                                               TypF     
                   )
# 181 "XMPar.fsy"
                 : 'gentype_Type));
|]
# 1284 "XMPar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 45;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : XMAbsyn.program =
    engine lexer lexbuf 0 :?> _
