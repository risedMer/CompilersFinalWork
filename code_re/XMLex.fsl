{
open FSharp.Text.Lexing
open XMPar

// 辅助函数，从lexbuf 得到当前的 词元字符串，lexeme 
let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

// keyword 处理关键字与标识符的辅助函数
let keyword s =   
    match s with
    | "char"    -> CHAR
    | "else"    -> ELSE
    | "false"   -> CSTBOOL 0
    | "if"      -> IF
    | "int"     -> INT
    | "float"   -> FLOAT
    | "null"    -> NULL
    | "print"   -> PRINT
    | "println" -> PRINTLN
    | "return"  -> RETURN
    | "break"   -> BREAK
    | "true"    -> CSTBOOL 1
    | "void"    -> VOID 
    | "while"   -> WHILE
    | "for"     -> FOR
    | "do"      -> DO
    | "sleep"   -> SLEEP
    | _         -> NAME s

// 字符串转义符处理函数
let cEscape s = 
    match s with 
    | "\\\\" -> '\\'
    | "\\\"" -> '\"'
    | "\\a"  -> '\007'
    | "\\b"  -> '\008'
    | "\\t"  -> '\t'
    | "\\n"  -> '\n'
    | "\\v"  -> '\011'
    | "\\f"  -> '\012'
    | "\\r"  -> '\r'
    | _      -> failwith "Lexer error: impossible C escape"
}
                        
rule Token = parse
  | [' ' '\t' '\r']                             { Token lexbuf } 
  | '\n'                                        { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf } // 换行处理 EndPos 是内置类型 Position的实例，表示当前行的结束位置
  | ['0'-'9']+                                  { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['0'-'9']+'.'['0'-'9']+                     { CSTFLOAT (System.Single.Parse (lexemeAsString lexbuf)) }
  | ['\'']+['a'-'z''A'-'Z''0'-'9']+['\'']       { try let single = lexemeAsString lexbuf in CSTCHAR (System.Char.Parse(single.Substring(1, 1))) with ex -> failwith "Char literal error." }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9']*    { keyword (lexemeAsString lexbuf) }
  | '+'                                         { PLUS }
  | '-'                                         { MINUS } 
  | '*'                                         { TIMES } 
  | '/'                                         { DIV } 
  | '%'                                         { MOD }                     
  | '='                                         { ASSIGN } 
  | "=="                                        { EQ } 
  | "!="                                        { NE }
  | '>'                                         { GT }
  | '<'                                         { LT }
  | ">="                                        { GE }
  | "<="                                        { LE }
  | "||"                                        { SEQOR }                     
  | "&&"                                        { SEQAND }                     
  | "&"                                         { AMP }                     
  | "!"                                         { NOT }                     
  | '('                                         { LPAR }
  | ')'                                         { RPAR }
  | '{'                                         { LBRACE }
  | '}'                                         { RBRACE }
  | '['                                         { LBRACK }
  | ']'                                         { RBRACK }
  | ';'                                         { SEMI }
  | ','                                         { COMMA }
  | "//"                                        { EndLineComment lexbuf; Token lexbuf }  //单行注释处理规则，调用响应处理函数 参数是 lexbuf 处理完后 lexbuf 内容已经更新，注释部分过滤 调用 Token 规则函数继续注释部分后面的处理
  | "/*"            { Comment lexbuf; Token lexbuf }   // 多行注释，调用 Comment规则
  | "(*"            { Comment2 lexbuf; Token lexbuf }   // (**) 注释
  | "<!--"          { Comment3 lexbuf; Token lexbuf }   // <!-- -->注释
  | '"'             { CSTSTRING (String [] lexbuf) }   // 调用字符串处理规则
  | eof             { EOF }
  | _               { failwith "Lexer error: illegal symbol" }

and Comment = parse
   | "/*"           { Comment lexbuf; Comment lexbuf }  // 注释的嵌套处理
   | "*/"           { () }                           // 注释处理结束
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Comment lexbuf } //注释跨行处理
   | (eof | '\026') { failwith "Lexer error: unterminated comment" }  // 多行注释未封闭
   | _              { Comment lexbuf }  // 其他任意情况都继续处理后续字符

and Comment2 = parse
   | "(*"           { Comment2 lexbuf; Comment2 lexbuf }
   | "*)"           { () }
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Comment2 lexbuf }
   | (eof | '\026') { failwith "Lexer error: unterminated comment" }
   | _              { Comment2 lexbuf }

and Comment3 = parse
   | "<!--"         { Comment3 lexbuf; Comment3 lexbuf }
   | "-->"          { () }
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Comment3 lexbuf }
   | (eof | '\026') { failwith "Lexer error: unterminated comment" }
   | _              { Comment3 lexbuf }

and EndLineComment = parse
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine }  //更新行尾位置，返回
   | (eof | '\026') { () }   // 文件结束，26 是 CTRL+Z的ASCII码，也是结束符 , () 退出返回
   | _              { EndLineComment lexbuf }  // 继续读lexbuf 中下个字符

and String chars = parse 
  | '"'     { Microsoft.FSharp.Core.String.concat "" (List.map string (List.rev chars)) } 
                                                        // 字符串结束，通过字符数组chars构造字符串
                                                        // 由于构造的时候是列表 cons ::操作
                                                        // 这里需要用List.rev 翻转字符数组
  | '\\' ['\\' '"' 'a' 'b' 't' 'n' 'v' 'f' 'r']   // 字符串 "\a" 读入后词法分析器 看到的是 "\\a"
      { String (cEscape (lexemeAsString lexbuf) :: chars) lexbuf }
  | "''"    { String ('\'' :: chars) lexbuf }
  | '\\'    { failwith "Lexer error: illegal escape sequence" }
  | (eof | '\026')       { failwith "Lexer error: unterminated string" } 
                                                   // 字符串中出现文件结束
  | ['\n' '\r']  { failwith "Lexer error: newline in string" }  //字符串中出现回车
  | ['\000'-'\031' '\127' '\255']    
      { failwith "Lexer error: invalid character in string" }  // 字符串中出现 ASCII 控制字符
  | _       { String (char (lexbuf.LexemeChar 0) :: chars) lexbuf } // 将读到的第1个字符加到临时的chars数组